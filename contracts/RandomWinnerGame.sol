//SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";

contract RandomWinnerGame is Ownable, VRFConsumerBase{
   //ChainLink variables
   //The amount of link to send with the request
   uint public fee;
   //ID of public against which randomness is generated 
   bytes32 public keyHash;

   //Address of players
   address[] public players;
   //Max number of players in one game
   uint8 maxPlayers;
   //variable to indicate if the game has started or not
   bool public gameStarted;
   //The fees for entering the game
   uint256 entryFee;
   // Current game id;
   uint256 public gameId;

   //This Events will get emmited when the game starts;
   event GameStarted(uint256 gameId, uint8 maxPlayers, uint256 entryFee);
   //emitted when someOne joins a game
   event PlayerJoined(uint256 gameId, address player);
   // emitted when the game ends
   event GameEnded(uint256 gameId, address winner, bytes32 requestId);

   /**
   * constructor inherits a VRFConsumerBase and initialises the values for keyHash, fee and gameStarted
   * @param vrfCoordinator address of VRFCoordinator contract
   *@param linkToken address of LINK token contract
   *@param vrfFee the amount of LINK to send with the request
   *@param vrfKeyHash ID of public key against which randomness is generated
    */
    constructor(address vrfCoordinator, address linkToken, bytes32 vrfKeyHash, uint256 vrfFee)
    VRFConsumerBase(vrfCoordinator, linkToken){
        keyHash = vrfKeyHash;
        fee = vrfFee;
        gameStarted = false;
    }

    /**
    * startGame starts the game by setting appropraite values for all the variables
     */
     function startGame(uint8 _maxPlayers, uint256 _entryFee) public onlyOwner{
        //Check if the game is already running
        require(!gameStarted, "Game is currently Running");
        //empty the players array
        delete players;
        //Set the max Players for this game
        maxPlayers = _maxPlayers;
        //Set the game started to true
        gameStarted = true;
        //Set up entry fee for this Game
        entryFee = _entryFee;
        gameId += 1;
        //Emit the event here
        emit GameStarted(gameId, maxPlayers, entryFee);

     }

     /**
     * joinGame is called when a player wants to enter the game
      */
      function joinGame() public payable {
        //Check if a game is already running
        require(gameStarted, "Game has not been started yet");
        //check If the value sent by the user matches the entryFee
        require(msg.value == entryFee, "Value sent is not equal to entry fee");
        //Check if there is still some space left in the game to add another player
        require(players.length < maxPlayers, "Game is full");
        //add the sender to the player list
        players.push(msg.sender);
        emit PlayerJoined(gameId, msg.sender);
        //if the list is full start the winner selection process
        if(players.length == maxPlayers){
            getRandomWinner();

        }

      }

      /**
    * fulfillRandomness is called by VRFCoordinator when it receives a valid VRF proof.
    * This function is overrided to act upon the random number generated by Chainlink VRF.
    * @param requestId  this ID is unique for the request we sent to the VRF Coordinator
    * @param randomness this is a random unit256 generated and returned to us by the VRF Coordinator
   */
    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual override  {
        // We want out winnerIndex to be in the length from 0 to players.length-1
        // For this we mod it with the player.length value
        uint256 winnerIndex = randomness % players.length;
        // get the address of the winner from the players array
        address winner = players[winnerIndex];
        // send the ether in the contract to the winner
        (bool sent,) = winner.call{value: address(this).balance}("");
        require(sent, "Failed to send Ether");
        // Emit that the game has ended
        emit GameEnded(gameId, winner,requestId);
        // set the gameStarted variable to false
        gameStarted = false;
    }
        /**
        *getRandomWinner is called to start the process of selecting a random winner
         */

         function getRandomWinner() private returns (bytes32 requestedId){
            //LINK is an internal interface for link token found within the VRFConsumerBase
            //Here, we use the balanceOf method from that interface to make sure that our
            //contract has enough link so that we can request the VRFCoodinator for randomness
            require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK");
            //Make a request to the VRF cordinator.
            //requestRandomness is a function within the consumerBase
            //Its starts the process of randomness generation
            return requestRandomness(keyHash, fee);
         }

         //function to recieve Ether. msg.data must be empty
         receive() external payable{}

         //Fallback function is called when msg.data is not empty
         fallback() external payable{}
}